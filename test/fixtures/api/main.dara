import Util;

type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @maxIdleConns = integer
type @readTimeout = integer
type @connectTimeout = integer
type @noProxy = string
type @key = string
type @cert = string
type @ca = string
type @retryOptions = $RetryOptions
type @disableHttp2 = boolean

static function defaultAny(inputValue: any, defaultValue: any): any {
  return inputValue;
}

function execute(param: boolean): any {
  var test = !@disableHttp2;
  if (@disableHttp2) {
    return true;
  }
  return defaultAny(@disableHttp2, false);
}

model Config {
}

init(config: Config);

api hello(): void {
  __request.method = 'GET';
  __request.pathname = '/';
  __request.headers = {
    host = 'www.test.com',
  };
} returns {
  return;
}

api helloRuntime(bodyType: string, runtime: Util.RuntimeOptions): string {
  __request.method = 'GET';
  __request.pathname = '/';
  __request.headers = {
    host = 'www.test.com',
  };
} returns {
  return 'test';
} runtime {
  key = Util.defaultString(runtime.key, @key),
  cert = Util.defaultString(runtime.cert, @cert),
  ca = Util.defaultString(runtime.ca, @ca),
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  socks5Proxy = Util.defaultString(runtime.socks5Proxy, @socks5Proxy),
  socks5NetWork = Util.defaultString(runtime.socks5NetWork, @socks5NetWork),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retryOptions = @retryOptions,
  ignoreSSL = runtime.ignoreSSL
}

model M = {};
api helloVirtualCall(m: M): void {
  __request.method = 'GET';
  __request.pathname = '/';
  __request.headers = {
    key = '',
  };
} returns {
  return;
}

model vno = {}

async function vnoPayCallBackNotifyEx(): vno {
  return null;
}
