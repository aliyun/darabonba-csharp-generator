import Ecs20140526
import OpenApi

/**
* Initialization  初始化公共请求参数
*/
static async function Initialization(regionId: string)throws : Ecs20140526{
    // 工程代码泄露可能会导致 AccessKey 泄露，并威胁账号下所有资源的安全性。以下代码示例仅供参考。
    // 建议使用更安全的 STS 方式，更多鉴权访问方式请参见：https://help.aliyun.com/document_detail/378657.html。
    var config = new OpenApi.Config{
      // 必填，请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_ID
      accessKeyId = $Env.get('ALIBABA_CLOUD_ACCESS_KEY_ID'),
      // 必填，请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_SECRET
      accessKeySecret = $Env.get('ALIBABA_CLOUD_ACCESS_KEY_SECRET'),
      // 您的可用区ID
      regionId = regionId
    };

    return new Ecs20140526(config);
}

static async function main(args: [ string ]) throws : void {
  var client = Initialization("cn-hangzhou");


  // 创建数据盘
        log("Step1: 创建数据盘");
  var createDiskResponseBody = createDisk(client);
  if (createDiskResponseBody == null) {
    log("任务'创建数据盘'失败。");
    return;
  }
  var diskId = createDiskResponseBody.diskId;
  log(`任务'创建数据盘'执行完成!`);


  // 等待云盘创建完成
        log("Step2: 等待云盘创建完成");
  var isWaitForDiskAvailableSuccess = waitForDiskAvailable(client, diskId);

        if (!isWaitForDiskAvailableSuccess) {
                log(`任务'等待云盘创建完成'失败。`);
                return;
        }
  log(`任务'等待云盘创建完成'执行完成!`);
  log(`任务"等待\"云盘\"建"完"成"执行完成!`);
  log('""');


  // 为实例挂载磁盘
        log("Step3: 为实例挂载磁盘");
  var attachDiskResponseBody = attachDisk(client, diskId);
  if (attachDiskResponseBody == null) {
    log("任务'为实例挂载磁盘'失败。");
    return;
  }
  
  log(`任务'为实例挂载磁盘'执行完成!`);


  // 等待云盘挂载完成
        log("Step4: 等待云盘挂载完成");
  if (!waitForDiskAttached(client, diskId)) {
    log(`任务'等待云盘挂载完成'失败。`);
    return;
  }
  if (waitForDiskAttached(client, diskId)) {
    log(`任务'等待云盘挂载完成'失败。`);
    return;
  }
  var isWaitForDiskAttachedSuccess = waitForDiskAttached(client, diskId);
  if (!isWaitForDiskAttachedSuccess) {
    log(`任务'等待云盘挂载完成'失败。`);
    return;
  }
  if (isWaitForDiskAttachedSuccess) {
    log(`任务'等待云盘挂载完成'失败。`);
    return;
  }
  log(`任务'等待云盘挂载完成'执行完成!`);
  


  // 打印云盘信息
        log("Step5: 打印云盘信息");
  var describeDisksResponseBody = logDiskInfo(client, diskId);
  if (describeDisksResponseBody == null) {
    log("任务'打印云盘信息'失败。");
    return;
  }
  
  log(`任务'打印云盘信息'执行完成!`);

}

/**
 * 创建数据盘
 * @param client Ecs20140526
 * @return The response body of CreateDisk
 */
static async function createDisk(client: Ecs20140526) throws: Ecs20140526.CreateDiskResponseBody {
  try {
    
      var request = new Ecs20140526.CreateDiskRequest{
              // 所属的地域ID
      regionId = "cn-hangzhou",

      // 在指定可用区内创建一块按量付费磁盘
      zoneId = "cn-hangzhou-h",

      // 磁盘名称
      diskName = "java-test",

      // 磁盘描述
      description = "",

      // 容量大小
      size = 40,

      // 数据盘的磁盘种类
      diskCategory = "cloud_auto",

      // 是否开启Burst（性能突发）
      burstingEnabled = true,


      };
      var response = client.createDisk(request);
      
      
    
    return response.body;
  } catch (error) {
    log(`执行失败。错误信息：`);
    log(error.message);
                return null;
  }
}

/**
 * 等待云盘创建完成
 * @param client Ecs20140526
 * @param diskId 云盘、本地盘或弹性临时盘ID
 * @return Whether the operation was successful
 */
static async function waitForDiskAvailable(client: Ecs20140526, diskId: string) throws: boolean {
  // maximum retry attempts
  var maxRetryTimes: int32 = 5;
  // current retry attempt
  var retryIndex: int32 = 0;

  while (retryIndex < maxRetryTimes) {
    try {
            
      var request = new Ecs20140526.DescribeDisksRequest{
              regionId = "cn-hangzhou",
            // 云盘、本地盘或弹性临时盘ID
            
      diskIds = $JSON.stringify([diskId]),
      };
      var response = client.describeDisks(request);
      var disk = response.body.disks.disk[0];
var diskStatus = disk.status;
      
    

      if (diskStatus.equals("Available")) {
        
        return true;
      }

      $sleep(3000);
      retryIndex++;
    } catch (error) {
      log(`执行失败。错误信息：`);
      log(error.message);
      return false;
    }
  }
  return false;
}

/**
 * 为实例挂载磁盘
 * @param client Ecs20140526
 * @param diskId 待挂载的磁盘ID
 * @return The response body of AttachDisk
 */
static async function attachDisk(client: Ecs20140526, diskId: string) throws: Ecs20140526.AttachDiskResponseBody {
  try {
    
      var request = new Ecs20140526.AttachDiskRequest{
              // 待挂载ECS实例的ID
      instanceId = "i-bp159d628gxsw4gks8dd",

      // 释放实例时
      deleteWithInstance = true,

            // 待挂载的磁盘ID
            
      diskId = diskId,
      };
      var response = client.attachDisk(request);
      
      
    
    return response.body;
  } catch (error) {
    log(`执行失败。错误信息：`);
    log(error.message);
                return null;
  }
}

/**
 * 等待云盘挂载完成
 * @param client Ecs20140526
 * @param diskId 云盘、本地盘或弹性临时盘ID
 * @return Whether the operation was successful
 */
static async function waitForDiskAttached(client: Ecs20140526, diskId: string) throws: boolean {
  // maximum retry attempts
  var maxRetryTimes: int32 = 5;
  // current retry attempt
  var retryIndex: int32 = 0;

  while (retryIndex < maxRetryTimes) {
    try {
            
      var request = new Ecs20140526.DescribeDisksRequest{
              regionId = "cn-hangzhou",
            // 云盘、本地盘或弹性临时盘ID
            
      diskIds = $JSON.stringify([diskId]),
      };
      var response = client.describeDisks(request);
      var disk = response.body.disks.disk[0];
var diskStatus = disk.status;
      
    

      if (diskStatus.equals("In_use")) {
        
        return true;
      }

      $sleep(3000);
      retryIndex++;
    } catch (error) {
      log(`执行失败。错误信息：`);
      log(error.message);
      return false;
    }
  }
  return false;
}

/**
 * 打印云盘信息
 * @param client Ecs20140526
 * @param diskId 云盘、本地盘或弹性临时盘ID
 * @return The response body of DescribeDisks
 */
static async function logDiskInfo(client: Ecs20140526, diskId: string) throws: Ecs20140526.DescribeDisksResponseBody {
  try {
    
      var request = new Ecs20140526.DescribeDisksRequest{
              regionId = "cn-hangzhou",
            // 云盘、本地盘或弹性临时盘ID
            
      diskIds = $JSON.stringify([diskId]),
      };
      var response = client.describeDisks(request);
      var disk = response.body.disks.disk[0];
      log(`云盘ID: ${disk.diskId}信息`);
log(`diskCategory: ${disk.category}`);
log(`名称: ${disk.diskName}`);
log(`状态: ${disk.status}`);
log(`可用区: ${disk.zoneId}`);
log(`大小: ${disk.size}GiB`);
log(`挂载在实例 ${disk.instanceId}`);
    
    return response.body;
  } catch (error) {
    log(`执行失败。错误信息：`);
    log(error.message);
                return null;
  }
}


// 自定义日志打印方法
static function log(message: string) throws: void {
        $Logger.info(message);
}


model daraModel {
  test: string
}

static function testMultiLines(): void {
  var certificate = "-----BEGIN CERTIFICATE-----\nMIIDlTCCAn2gAwIBAgIRALq6ehQjtveDrqiUoDu8088wDQYJKoZIhvcNAQELBQAw\ngYsxCzAJBgNVBAYTAkNOMRYwFAYDVQQKEw1BbGliYWJhIENsb3VkMTcwNQYDVQQL\nEy5BbGliYWJhIENsb3VkIENsaWVudCBTU0wgQ2VydGlmaWNhdGUgQXV0aG9yaXR5\nMSswKQYDVQQDEyJBbGl5dW4gRVNBIFJTQSBDQSAxMTExMDM0NDA0NjE4NjQ2MB4X\nDTI1MDMxMzExMDY1NFoXDTI2MDMxMzExMDY1NFowLjELMAkGA1UEBhMCQ04xHzAd\nBgNVBAMTFkVTQSBDbGllbnQgQ2VydGlmaWNhdGUwggEiMA0GCSqGSIb3DQEBAQUA\nA4IBDwAwggEKAoIBAQC5NK/ZpIHntyeWArDMHUG8biRBtj5MoVKvIuNANcaTDN9b\nmnEpLpc9Jw9TdTryY95h4U43C+SQ0mYiqAvgWQUSO3SGIPXLjVEEQKUz0+l5Sqpn\nGv+dc+/sDutRW5Qj0VfvcFtqniwCKNtmhLPUr5jtArIcpz2+bgWqTTF7biUHtFH1\nygRSgADpvC8OWv4CJL97g9TEn2bBcem/7L+bhDWZTA4ljmfsNF5S66d5kpD2YyoR\n6Ll7pWspVl0BfenDizK/bG166HhYTjf1lLKtdEaotZZBbx4UGO67LCpBgv4oMX/Q\n4ttio3oznmKKjmY44gBGYHGbAFKByYlOjSOcvj+DAgMBAAGjUDBOMB0GA1UdJQQW\nMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaA\nFK8eYb/M6Hp3ZcGmoRJ3TLJuvyKdMA0GCSqGSIb3DQEBCwUAA4IBAQB5pOJ4DAm3\nQbKE4cdw4LSknu29XoOQSB4KcMfD7zdeBw5dAKtQlP1cWNXX0rlmPBRxFo6qRXGW\n+uu/mOj0waU+7O/LbLGTOHG/APEN/1pqs5g3jFjS0zqtby3FXvnhVjBOV5skbq2q\nOpT2u8gCgvssx2bCue4mJ9uO2JNO/Nel4yneBevpvxKTKUnX5akXDIY612RPQjtJ\nX74jlLepOgIn/PYeKiwQFs0YoGXAjaUp7wFlIAfW+ufqPOc2nMUnBsw7Dtr6IpEX\n9RZLKzcYBpP4ieP8Sl07CUKoM94cC75rwLI/RVmatly6SlBzx2G8qh7T3MDYAeT4\nSAVHJpmH3me9\n-----END CERTIFICATE-----\n";
}

model Model = {
  model?: {
    unHandleNumbers?: [ string ](name='UnHandleNumbers', description='错误手机号'),
  }(name='Model'),
}