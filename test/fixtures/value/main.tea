static function testReturnBool(str: string) : boolean {
  if (str.equals("true")) {
    return true;
  }
  return false;
}

static async function testReturnBool1(str: string) : boolean {
  if (str.equals("true")) {
    return true;
  }
  return false;
}


static function testReturnInt(str: string) : int32 {
  if (str.equals("true")) {
    return 0;
  }
  return 1;
}

static async function aaa(): void {
  var costAcknowledged = $Env.get("COST_ACK");

  var a = 0;
  var b = 1;
  if ((a + b) > 1) {
    return;
  }
  
  if (costAcknowledged.equals("true")) {
      $Logger.warning("000");
      return;
  }

  if (!costAcknowledged.equals("true")) {
      $Logger.warning("111");
      return;
  }


  if ($isNull(costAcknowledged) || costAcknowledged.equals("true")) {
      $Logger.warning("222");
      return;
  }

  if ($isNull(costAcknowledged) || !costAcknowledged.equals("true")) {
      $Logger.warning("333");
      return;
  }

  if ($isNull(costAcknowledged) || costAcknowledged != "true") {
    $Logger.warning("444");
      return;
  }

  if ($isNull(costAcknowledged) || !costAcknowledged.contains("true")) {
      $Logger.warning("555");
      return;
  }

  if (!$isNull(costAcknowledged) || costAcknowledged.contains("true")) {
      $Logger.warning("666");
      return;
  }

  if (testReturnBool(costAcknowledged) || testReturnBool1("true")) {
    $Logger.warning("777");
    return;
  }

  if (testReturnBool(costAcknowledged) && testReturnBool1("true")) {
    $Logger.warning("888");
    return;
  }
  var test = testReturnBool(costAcknowledged) && testReturnBool1("true");
  if (test) {
    return;
  }

  var test1 = testReturnBool(costAcknowledged) || testReturnBool1("true");
  if (test1) {
    return;
  }

  if (testReturnBool("true")) {
    return;
  }

  if (!(testReturnBool("true") || testReturnBool1(costAcknowledged) ||testReturnBool(costAcknowledged))) {
    return;
  }
  if (testReturnBool("true") || testReturnBool1(costAcknowledged) ||testReturnBool(costAcknowledged)) {
    return;
  }

  if ((testReturnInt("true") + testReturnInt("false")) > 2) {
    return;
  }

  var testMap : map[string]string = {
    "key1" = "value1",
    "key2" = "value2",
  };

  var testStr = "xxx";
  if ((testMap.length() < 0) || testStr.contains("x")) {
    return;
  }
}

static async function main(args: [ string ]) throws : void {
  var isWaitForDiskAvailableSuccess = waitForDiskAvailable("diskId");
  if (!isWaitForDiskAvailableSuccess) {
          log(`任务'等待云盘创建完成'失败。`);
          return;
  }
  log(`任务'等待云盘创建完成'执行完成!`);
  log(`任务"等待\"云盘\"建"完"成"执行完成!`);
  log('""');

  
  // 等待云盘挂载完成
  log("Step4: 等待云盘挂载完成");
  if (!waitForDiskAttached("diskId")) {
    log(`任务'等待云盘挂载完成'失败。`);
    return;
  }
  if (waitForDiskAttached("diskId")) {
    log(`任务'等待云盘挂载完成'失败。`);
    return;
  }
  var isWaitForDiskAttachedSuccess = waitForDiskAttached("diskId");
  if (!isWaitForDiskAttachedSuccess) {
    log(`任务'等待云盘挂载完成'失败。`);
    return;
  }
  if (isWaitForDiskAttachedSuccess) {
    log(`任务'等待云盘挂载完成'失败。`);
    return;
  }
  log(`任务'等待云盘挂载完成'执行完成!`);

}


static async function waitForDiskAvailable(diskId: string) throws: boolean {
  return false;
}

static async function waitForDiskAttached(diskId: string) throws: boolean {
  return false;
}

// 自定义日志打印方法
static function log(message: string) throws: void {
        $Logger.info(message);
}


model daraModel {
  test: string
}

static function testMultiLines(): void {
  var certificate = "-----BEGIN xxx-----\nMIQAw\ngYsxCzAJBkMTcwNQYDVQQL\nEy5BU0wgQ2VydGlmDEyJBzAd\nBgN9\n-----END xxx-----\n";
}

model Model = {
  model?: {
    unHandleNumbers?: [ string ](name='UnHandleNumbers', description='错误手机号'),
  }(name='Model'),
}